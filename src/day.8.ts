import fs from "fs";

function parseInput() {
  return fs
    .readFileSync("src/day.8.input.txt")
    .toString()
    .split("\n")
    .filter((x) => x)
    .map((x) => x.split("").map(Number));
}

export function part1() {
  const input = parseInput();

  const trees = `1 2
  1 3
  1 9
  1 10
  1 11
  1 13
  1 16
  1 17
  1 18
  1 21
  1 25
  1 26
  1 27
  1 28
  1 36
  1 37
  1 39
  1 40
  1 41
  1 43
  1 46
  1 49
  1 53
  1 55
  1 59
  1 62
  1 63
  1 65
  1 66
  1 67
  1 68
  1 70
  1 71
  1 73
  1 75
  1 78
  1 80
  1 82
  1 84
  1 87
  1 89
  1 90
  1 91
  1 94
  2 2
  2 7
  2 11
  2 19
  2 23
  2 29
  2 30
  2 36
  2 38
  2 43
  2 44
  2 49
  2 54
  2 57
  2 58
  2 60
  2 63
  2 64
  2 71
  2 73
  2 76
  2 80
  2 82
  2 83
  2 84
  2 86
  2 88
  2 91
  2 95
  2 97
  3 10
  3 20
  3 25
  3 32
  3 35
  3 37
  3 41
  3 43
  3 50
  3 56
  3 59
  3 62
  3 64
  3 67
  3 70
  3 71
  3 72
  3 79
  3 83
  3 92
  3 95
  4 5
  4 12
  4 22
  4 30
  4 38
  4 63
  4 64
  4 65
  4 68
  4 69
  4 82
  4 83
  4 90
  4 97
  5 1
  5 4
  5 5
  5 8
  5 16
  5 23
  5 25
  5 29
  5 45
  5 69
  5 72
  5 77
  5 81
  5 85
  5 93
  5 95
  5 97
  6 3
  6 7
  6 9
  6 23
  6 30
  6 33
  6 34
  6 35
  6 44
  6 68
  6 72
  6 73
  6 74
  6 79
  6 87
  6 88
  6 89
  7 2
  7 13
  7 17
  7 24
  7 27
  7 32
  7 36
  7 39
  7 42
  7 46
  7 48
  7 73
  7 80
  7 88
  7 95
  8 1
  8 12
  8 22
  8 25
  8 40
  8 41
  8 42
  8 46
  8 50
  8 61
  8 70
  8 71
  8 80
  8 95
  8 96
  8 97
  9 1
  9 19
  9 22
  9 41
  9 50
  9 55
  9 61
  9 63
  9 69
  9 87
  9 96
  9 97
  10 1
  10 6
  10 11
  10 26
  10 28
  10 29
  10 38
  10 43
  10 44
  10 53
  10 57
  10 63
  10 66
  10 76
  10 84
  10 86
  10 90
  10 93
  10 97
  11 2
  11 8
  11 10
  11 18
  11 27
  11 35
  11 36
  11 37
  11 39
  11 42
  11 49
  11 51
  11 54
  11 56
  11 65
  11 74
  11 79
  11 82
  11 90
  12 9
  12 29
  12 32
  12 52
  12 70
  12 73
  12 92
  12 96
  12 97
  13 13
  13 14
  13 20
  13 21
  13 30
  13 58
  13 70
  13 80
  13 81
  13 89
  13 93
  14 1
  14 3
  14 7
  14 19
  14 20
  14 37
  14 47
  14 51
  14 67
  14 71
  14 78
  14 93
  14 97
  15 14
  15 26
  15 36
  15 42
  15 44
  15 45
  15 48
  15 49
  15 52
  15 53
  15 59
  15 62
  15 68
  15 71
  15 77
  15 83
  15 85
  15 91
  15 97
  16 1
  16 8
  16 14
  16 15
  16 16
  16 23
  16 25
  16 27
  16 31
  16 41
  16 42
  16 59
  16 60
  16 62
  16 66
  16 71
  16 75
  16 78
  16 86
  16 90
  16 91
  16 95
  16 97
  17 11
  17 16
  17 19
  17 29
  17 33
  17 40
  17 57
  17 58
  17 59
  17 74
  17 75
  17 86
  17 93
  17 96
  18 2
  18 14
  18 22
  18 34
  18 55
  18 56
  18 66
  18 71
  18 83
  18 95
  19 2
  19 4
  19 7
  19 15
  19 18
  19 28
  19 35
  19 38
  19 41
  19 46
  19 47
  19 50
  19 64
  19 66
  19 77
  19 80
  19 81
  19 94
  19 95
  19 97
  20 1
  20 2
  20 3
  20 4
  20 11
  20 31
  20 70
  20 72
  20 78
  20 87
  20 88
  20 90
  20 94
  20 96
  21 1
  21 10
  21 18
  21 23
  21 37
  21 39
  21 66
  21 73
  21 80
  21 87
  21 95
  21 97
  22 2
  22 8
  22 12
  22 18
  22 35
  22 43
  22 51
  22 59
  22 79
  22 81
  22 91
  23 3
  23 9
  23 17
  23 19
  23 20
  23 27
  23 32
  23 42
  23 47
  23 54
  23 56
  23 59
  23 60
  23 69
  23 72
  23 73
  23 76
  23 79
  23 91
  23 97
  24 5
  24 8
  24 13
  24 17
  24 24
  24 27
  24 38
  24 44
  24 46
  24 48
  24 49
  24 58
  24 59
  24 72
  24 82
  24 83
  24 92
  24 97
  25 6
  25 9
  25 16
  25 26
  25 27
  25 30
  25 36
  25 42
  25 45
  25 57
  25 62
  25 63
  25 74
  25 77
  25 84
  25 87
  25 92
  25 95
  26 7
  26 15
  26 26
  26 37
  26 40
  26 52
  26 61
  26 64
  26 86
  26 91
  26 97
  27 5
  27 7
  27 8
  27 23
  27 28
  27 29
  27 33
  27 36
  27 39
  27 65
  27 74
  27 82
  27 94
  28 1
  28 7
  28 21
  28 23
  28 35
  28 53
  28 67
  28 68
  28 72
  28 85
  28 94
  29 1
  29 2
  29 9
  29 13
  29 22
  29 33
  29 34
  29 41
  29 46
  29 50
  29 64
  29 68
  29 69
  29 75
  29 86
  29 89
  29 93
  29 96
  30 5
  30 19
  30 20
  30 36
  30 43
  30 53
  30 54
  30 55
  30 57
  30 66
  30 78
  30 87
  30 97
  31 5
  31 6
  31 12
  31 21
  31 24
  31 30
  31 43
  31 45
  31 48
  31 51
  31 66
  31 80
  31 84
  31 93
  31 97
  32 4
  32 14
  32 23
  32 28
  32 39
  32 40
  32 58
  32 70
  32 77
  32 80
  32 82
  32 88
  32 94
  32 97
  33 1
  33 3
  33 19
  33 25
  33 28
  33 32
  33 41
  33 54
  33 59
  33 62
  33 71
  33 73
  33 88
  33 97
  34 4
  34 13
  34 24
  34 30
  34 38
  34 63
  34 72
  34 73
  34 89
  34 93
  35 15
  35 20
  35 26
  35 27
  35 29
  35 38
  35 60
  35 74
  35 76
  35 79
  35 81
  35 88
  35 96
  35 97
  36 1
  36 7
  36 17
  36 20
  36 30
  36 40
  36 56
  36 64
  36 67
  36 78
  36 82
  36 95
  37 1
  37 9
  37 24
  37 25
  37 34
  37 55
  37 61
  37 64
  37 66
  37 80
  37 83
  37 96
  38 2
  38 13
  38 20
  38 29
  38 32
  38 36
  38 37
  38 49
  38 68
  38 75
  38 81
  38 97
  39 1
  39 2
  39 12
  39 24
  39 32
  39 42
  39 47
  39 59
  39 74
  39 84
  39 90
  39 97
  40 1
  40 2
  40 5
  40 9
  40 21
  40 31
  40 44
  40 68
  40 74
  40 79
  40 84
  40 97
  41 1
  41 5
  41 16
  41 20
  41 23
  41 35
  41 59
  41 71
  41 82
  41 91
  41 96
  42 3
  42 8
  42 19
  42 24
  42 33
  42 62
  42 69
  42 79
  42 90
  42 91
  42 94
  43 1
  43 2
  43 14
  43 19
  43 23
  43 24
  43 30
  43 63
  43 72
  43 81
  43 88
  44 10
  44 11
  44 20
  44 28
  44 30
  44 67
  44 68
  44 73
  44 78
  44 89
  44 94
  44 95
  45 1
  45 13
  45 16
  45 17
  45 18
  45 22
  45 34
  45 65
  45 70
  45 77
  45 85
  45 91
  45 95
  45 97
  46 13
  46 20
  46 28
  46 30
  46 52
  46 71
  46 78
  46 85
  46 87
  46 96
  46 97
  47 2
  47 7
  47 8
  47 20
  47 23
  47 31
  47 71
  47 80
  47 86
  48 2
  48 16
  48 23
  48 34
  48 68
  48 74
  48 78
  48 83
  48 94
  49 2
  49 7
  49 15
  49 23
  49 29
  49 71
  49 78
  49 86
  49 91
  49 92
  49 97
  50 1
  50 3
  50 17
  50 22
  50 37
  50 61
  50 76
  50 77
  50 83
  50 86
  50 92
  50 93
  50 95
  50 96
  51 1
  51 4
  51 12
  51 17
  51 25
  51 37
  51 67
  51 77
  51 86
  51 96
  51 97
  52 9
  52 18
  52 30
  52 41
  52 69
  52 78
  52 85
  52 91
  52 94
  53 5
  53 7
  53 9
  53 23
  53 34
  53 67
  53 74
  53 83
  53 89
  53 92
  53 97
  54 1
  54 2
  54 5
  54 12
  54 15
  54 22
  54 30
  54 36
  54 70
  54 76
  54 79
  54 92
  54 93
  54 95
  55 1
  55 2
  55 4
  55 16
  55 28
  55 41
  55 62
  55 78
  55 84
  55 92
  56 1
  56 2
  56 16
  56 22
  56 41
  56 49
  56 69
  56 78
  56 84
  56 93
  56 95
  57 1
  57 3
  57 11
  57 15
  57 29
  57 31
  57 33
  57 59
  57 67
  57 82
  57 90
  58 1
  58 15
  58 20
  58 26
  58 35
  58 67
  58 77
  58 84
  58 92
  58 95
  58 96
  59 1
  59 9
  59 16
  59 29
  59 32
  59 60
  59 67
  59 69
  59 81
  59 90
  59 91
  59 92
  59 96
  60 1
  60 6
  60 8
  60 20
  60 30
  60 31
  60 34
  60 68
  60 74
  60 77
  60 79
  60 91
  60 94
  61 1
  61 2
  61 7
  61 8
  61 17
  61 26
  61 37
  61 41
  61 63
  61 76
  61 91
  61 93
  62 5
  62 9
  62 22
  62 25
  62 38
  62 58
  62 75
  62 84
  62 92
  63 1
  63 2
  63 13
  63 26
  63 37
  63 57
  63 66
  63 69
  63 81
  63 88
  63 94
  64 2
  64 13
  64 19
  64 32
  64 43
  64 54
  64 62
  64 65
  64 75
  64 77
  64 85
  64 93
  64 97
  65 6
  65 19
  65 21
  65 28
  65 38
  65 42
  65 43
  65 44
  65 50
  65 51
  65 53
  65 64
  65 73
  65 76
  65 82
  65 94
  65 96
  66 1
  66 10
  66 18
  66 29
  66 38
  66 46
  66 55
  66 59
  66 63
  66 71
  66 82
  66 83
  66 88
  66 94
  66 97
  67 2
  67 6
  67 16
  67 20
  67 22
  67 27
  67 40
  67 45
  67 60
  67 72
  67 79
  67 81
  67 93
  67 97
  68 5
  68 14
  68 20
  68 29
  68 30
  68 39
  68 40
  68 56
  68 60
  68 61
  68 69
  68 79
  68 80
  68 87
  68 88
  68 95
  68 96
  69 1
  69 12
  69 33
  69 47
  69 48
  69 77
  69 80
  69 91
  69 96
  70 2
  70 9
  70 14
  70 20
  70 24
  70 26
  70 32
  70 41
  70 42
  70 47
  70 48
  70 52
  70 58
  70 68
  70 70
  70 74
  70 84
  70 93
  71 1
  71 13
  71 14
  71 15
  71 25
  71 34
  71 48
  71 49
  71 53
  71 64
  71 65
  71 66
  71 74
  71 76
  71 89
  72 2
  72 5
  72 13
  72 16
  72 23
  72 34
  72 35
  72 36
  72 50
  72 59
  72 72
  72 81
  72 94
  72 96
  73 9
  73 20
  73 32
  73 33
  73 35
  73 38
  73 39
  73 46
  73 61
  73 66
  73 71
  73 74
  73 86
  73 88
  73 90
  73 93
  74 1
  74 3
  74 9
  74 18
  74 24
  74 27
  74 35
  74 44
  74 58
  74 62
  74 74
  74 75
  74 82
  74 96
  74 97
  75 1
  75 7
  75 21
  75 25
  75 32
  75 37
  75 51
  75 52
  75 57
  75 59
  75 75
  75 80
  75 92
  76 1
  76 2
  76 13
  76 25
  76 28
  76 29
  76 31
  76 33
  76 45
  76 51
  76 55
  76 60
  76 62
  76 73
  76 84
  76 91
  76 95
  76 96
  77 2
  77 4
  77 8
  77 10
  77 17
  77 33
  77 36
  77 45
  77 54
  77 56
  77 73
  77 77
  77 86
  77 94
  78 3
  78 4
  78 8
  78 25
  78 28
  78 41
  78 47
  78 67
  78 70
  78 72
  78 76
  78 77
  78 82
  78 94
  79 1
  79 12
  79 19
  79 21
  79 40
  79 57
  79 60
  79 66
  79 73
  79 78
  79 81
  79 94
  80 7
  80 19
  80 20
  80 22
  80 30
  80 41
  80 43
  80 49
  80 52
  80 64
  80 65
  80 69
  80 78
  80 94
  80 97
  81 1
  81 2
  81 20
  81 23
  81 42
  81 46
  81 62
  81 79
  81 80
  81 89
  81 97
  82 11
  82 12
  82 15
  82 30
  82 38
  82 39
  82 56
  82 72
  82 77
  82 78
  82 89
  82 96
  82 97
  83 7
  83 13
  83 23
  83 36
  83 44
  83 53
  83 56
  83 59
  83 63
  83 74
  83 87
  83 94
  83 97
  84 2
  84 6
  84 11
  84 13
  84 18
  84 25
  84 26
  84 27
  84 51
  84 61
  84 62
  84 65
  84 66
  84 74
  84 85
  84 92
  84 95
  84 96
  85 5
  85 8
  85 14
  85 32
  85 35
  85 42
  85 45
  85 48
  85 50
  85 54
  85 55
  85 58
  85 75
  85 79
  85 93
  86 1
  86 5
  86 6
  86 7
  86 16
  86 29
  86 30
  86 34
  86 36
  86 37
  86 51
  86 59
  86 67
  86 70
  86 74
  86 84
  86 91
  87 1
  87 9
  87 20
  87 31
  87 55
  87 68
  87 69
  87 71
  87 78
  87 81
  87 83
  87 88
  87 95
  88 9
  88 17
  88 26
  88 27
  88 32
  88 39
  88 51
  88 64
  88 82
  88 88
  88 96
  88 97
  89 7
  89 9
  89 13
  89 19
  89 22
  89 33
  89 38
  89 43
  89 48
  89 50
  89 61
  89 65
  89 68
  89 74
  89 79
  89 85
  89 89
  89 90
  90 4
  90 10
  90 12
  90 13
  90 16
  90 21
  90 25
  90 28
  90 32
  90 38
  90 40
  90 41
  90 43
  90 44
  90 52
  90 58
  90 71
  90 75
  90 91
  91 1
  91 4
  91 7
  91 20
  91 24
  91 29
  91 48
  91 53
  91 56
  91 60
  91 62
  91 79
  91 82
  91 84
  91 97
  92 5
  92 23
  92 31
  92 35
  92 36
  92 38
  92 49
  92 57
  92 58
  92 59
  92 65
  92 67
  92 69
  92 86
  92 94
  93 5
  93 10
  93 14
  93 21
  93 24
  93 25
  93 42
  93 46
  93 47
  93 54
  93 55
  93 62
  93 72
  93 76
  93 83
  93 87
  93 94
  93 96
  94 1
  94 3
  94 14
  94 33
  94 45
  94 47
  94 50
  94 55
  94 66
  94 73
  94 74
  94 84
  94 96
  94 97
  95 4
  95 12
  95 15
  95 17
  95 25
  95 30
  95 31
  95 36
  95 37
  95 63
  95 71
  95 77
  95 90
  95 95
  96 11
  96 13
  96 27
  96 29
  96 34
  96 39
  96 40
  96 46
  96 48
  96 53
  96 55
  96 56
  96 57
  96 61
  96 63
  96 65
  96 70
  96 78
  96 79
  96 82
  96 83
  96 86
  96 95
  97 2
  97 3
  97 6
  97 8
  97 9
  97 11
  97 13
  97 16
  97 17
  97 18
  97 21
  97 23
  97 24
  97 25
  97 30
  97 33
  97 36
  97 40
  97 41
  97 44
  97 45
  97 46
  97 47
  97 48
  97 51
  97 52
  97 53
  97 56
  97 60
  97 61
  97 67
  97 68
  97 71
  97 72
  97 73
  97 74
  97 75
  97 76
  97 79
  97 80
  97 81
  97 83
  97 85
  97 86
  97 87
  97 89
  97 91
  97 92
  97 93
  97 97`
    .split("\n")
    .map((x) => x.trim().split(" ").map(Number));

  console.log(trees);

  let count = 0;
  let max = 0;
  for (let i = 1; i < input.length - 1; i++) {
    outer: for (let j = 1; j < input.length - 1; j++) {
      if (!trees.find(([x, y]) => x === i && y === j)) {
        continue;
      }

      let vis1 = true;
      let dist1 = 0;
      let vis2 = true;
      let dist2 = 0;
      let vis3 = true;
      let dist3 = 0;
      let vis4 = true;
      let dist4 = 0;

      for (let n = i - 1; n >= 0; n--) {
        dist1++;
        if (input[n][j] >= input[i][j]) {
          vis1 = false;
          break;
        }
      }

      for (let n = j - 1; n >= 0; n--) {
        dist2++;
        if (input[i][n] >= input[i][j]) {
          vis2 = false;
          break;
        }
      }

      for (let n = i + 1; n < input[i].length; n++) {
        dist3++;
        if (input[n][j] >= input[i][j]) {
          vis3 = false;
          break;
        }
      }

      for (let n = j + 1; n < input[i].length; n++) {
        dist4++;
        if (input[i][n] >= input[i][j]) {
          vis4 = false;
          break;
        }
      }
      //console.log(i, j, dist1, dist2, dist3, dist4);

      if (dist1 * dist2 * dist3 * dist4 > max) {
        max = dist1 * dist2 * dist3 * dist4;
      }
    }
  }

  return max;
}

export function part2() {
  const input = parseInput();

  let count = 0;

  for (let i = 1; i < input.length - 1; i++) {
    outer: for (let j = 1; j < input.length - 1; j++) {
      let vis1 = true;
      let dist1 = 0;
      let vis2 = true;
      let dist2 = 0;
      let vis3 = true;
      let dist3 = 0;
      let vis4 = true;
      let dist4 = 0;

      for (let n = 0; n < i; n++) {
        if (input[n][j] >= input[i][j]) {
          vis1 = false;
          break;
        }
      }

      for (let n = 0; n < j; n++) {
        if (input[i][n] >= input[i][j]) {
          vis2 = false;
          break;
        }
      }

      for (let n = input[i].length - 1; n > i; n--) {
        if (input[n][j] >= input[i][j]) {
          vis3 = false;
          break;
        }
      }

      for (let n = input[i].length - 1; n > j; n--) {
        if (input[i][n] >= input[i][j]) {
          vis4 = false;
          break;
        }
      }

      if (vis1 || vis2 || vis3 || vis4) {
        //console.log(i, j);
        count++;
      }
    }
  }

  return count + 4 * input.length - 4;
}
